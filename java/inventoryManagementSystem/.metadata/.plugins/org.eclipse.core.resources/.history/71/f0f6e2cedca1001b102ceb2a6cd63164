package patternChanged;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.PrintWriter;
import java.util.*;
import java.util.Map.Entry;

public class Initializer {
Scanner s= new Scanner(System.in);
static HashMap prods= new HashMap();
static HashMap prodDesc;
HashMap prodBrand;
static Initializer i;
static File file;
	public static void main(String[] args)  {
		file= new File("f:\\test.csv");
	 i= new Initializer();
	 i.readfile();
//	 i.mainOptions();
	}	
	void mainOptions() {
		System.out.println("==========================[  main menu  ]==============================\n"
				+ "  select any one of the following option \n"
				+ "     ENTER: \n"
				+ "         enter 1 to buy products \n"
				+ "         enter 2 to sell products \n"
				+ "         enter 3 to Quit \n"
				+ "         enter 4 to print as csv\n"
				+ "         enter 5 to show all entries\n"
				+ "=========================================================================");
		int opt=si();
			switch(opt) {
			case 1: {this.buyOptions();break;}
			case 2:{this.sellOptions();break;}
			case 3:{this.quit();break;}
			case 4:{this.printFile();break;}
			case 5:{this.listAll();break;}
			}
	}
	
	void buyOptions() {
		System.out.println("============================[ buyer options ]=============================");
		listProd();
		System.out.println("enter product name :");String product=s.nextLine();
		listBrand(product);
		System.out.println("enter product brand :");String brand=s.nextLine();

		prodDesc= new HashMap();
		if (prods.containsKey(product))
		prodBrand=(HashMap)prods.get(product);
		else 
			prodBrand=new HashMap();
		
		 int validate;
			
		if (prods.containsKey(product)&&prodBrand.containsKey(brand)) {
			prodDesc= (HashMap) prodBrand.get(brand);
			avail(prodDesc);
			System.out.println("enter number of quantity need to be buy");int reduce=si();
			  validate=Integer.parseInt((String)prodDesc.get("stock")) -reduce;
			if(validate>0) {
				prodDesc.put("stock",String.valueOf(validate));
				prodBrand.put(brand, prodDesc);
				prods.put(product, prodBrand);
//				System.out.println(prods);
printFile();
				//				 System.out.println(prodDesc.get("product")+" "+prodDesc.get("brand")+" "+prodDesc.get("stock")+" "+prodDesc.get("price"));
				}
			else{System.out.printf("product available is %d less than you requested",validate);}
		}
		else {System.out.println("There is no product match with your request search again");}
		this.mainOptions();
	}
	
	void listAll() {
		System.out.println("---------------------[list of products]-----------------");
		Set ts=  prods.keySet();
		Iterator i=ts.iterator();
		while(i.hasNext())
		{String an= (String)i.next();prodBrand= (HashMap) prods.get(an);
		Set ts1=  prodBrand.keySet();
		Iterator i1=ts1.iterator();
		while(i1.hasNext()) {
			String an1= (String)i1.next();prodDesc= (HashMap) prodBrand.get(an1);
			System.out.println(an +" => "+an1
			+" => "+prodDesc.get("stock")+" nos avail => "+prodDesc.get("price")+" rs/piece.");
		}
		 
		}
		System.out.println("------------------------[end of list]---------------------------------");
		this.mainOptions();
	}
	void sellOptions() {
			System.out.println("============================[seller options]============================="
					+ "\nselect any one of the following option \n"
				+ " ENTER: \n enter 1 to create product details \n"
				+ " enter 2 to update product details \n"
				+ " enter 3 to home \n"
				+ "=========================================================================");
		
			int opt=s.nextInt();
			s.nextLine();
			switch(opt) {
			case 1: {this.createProds();break;}
			case 2:{this.updateProds();break;}
			case 3:{this.mainOptions();break;}
			}
	}
	
	void createProds() {
System.out.println("==========================[create product details]==========================\n");
		System.out.println("enter product name :");String product=s.nextLine();
		System.out.println("enter product brand");String brand=s.nextLine();
		
		prodDesc= new HashMap();
		if (prods.containsKey(product))
		prodBrand=(HashMap)prods.get(product);
		else 
			prodBrand=new HashMap();
		if (prods.containsKey(product)&&prodBrand.containsKey(brand)) {
			
			this.updateProds();
		}
		else {
		System.out.println("enter new stocks to be entered");
		String newStocksEntered=s.nextLine();
		System.out.println("enter price of the product");
		String price=s.nextLine();
		
		prodDesc.put("stock", newStocksEntered);
		prodDesc.put("price", price);
//		System.out.println(prodDesc);
		prodBrand.put(brand, prodDesc);
		prods.put(product, prodBrand);

//		System.out.println(prods);
		System.out.println("product created successfully");
		printFile();
		System.out.println("====================================================================");
		this.mainOptions();
		}
	}
	void updateProds() {
System.out.println("=======================[update product details]=============================");
listProd();	
System.out.println("enter product name :");String product=s.nextLine();
if (prods.containsKey(product))
	prodBrand=(HashMap)prods.get(product);
	else 
		prodBrand=new HashMap();
listBrand(product);		
System.out.println("enter product brand");String brand=s.nextLine();
		
		if (prods.containsKey(product)&&prodBrand.containsKey(brand)) {
			prodDesc= (HashMap) prodBrand.get(brand);
			System.out.println("update no stocks to be added to the inventory");
			String newStocksEntered=String.valueOf(Integer.parseInt((String)prodDesc.get("stock"))+si());
			System.out.println("enter price of the product");String price=s.nextLine();
			
			prodDesc.put("stock", newStocksEntered);
			prodDesc.put("price", price);
			prodBrand.put(brand, prodDesc);
			prods.put(product, prodBrand);
//			System.out.println(prods);
			this.mainOptions();
		}
		else {
			System.out.println("you are directed to create products");
			this.createProds();

		}
		printFile();
	System.out.println("==============================================================");
	}
	void quit() {
		printFile();
		System.out.println("===============[applications ends here]====================");
	}

	int si() {
	int value=0;
		try {
			value =s.nextInt();
			s.nextLine();
			
		}catch (Exception e) {
			s=new Scanner(System.in);
			System.out.println(e);
			System.out.println("please provide numeric values with out decimal point");
			System.out.println("==>"+value);
			value=si();
//quit();
		}
	return value;
	}

void printFile() {
	try {
		PrintWriter writer = new PrintWriter(file);
		StringBuilder sb = new StringBuilder();
		sb.append("product,brand,stock,price\n");
		Iterator pi = prods.entrySet().iterator();
		while(pi.hasNext())
		{
			Map.Entry entry = (Entry) pi.next();
			String product=String.valueOf(entry.getKey());
			HashMap hm=(HashMap)entry.getValue();
			Iterator i=hm.entrySet().iterator();
			while(i.hasNext())
			{
				Map.Entry entry1 = (Entry) i.next();
				String brand= String.valueOf(entry1.getKey());
				HashMap hm1=(HashMap)entry1.getValue();
			sb.append(product+","+brand+","+hm1.get("stock")+","+hm1.get("price"))	;
	         if(pi.hasNext()) {
	        	 sb.append("\n");
	         }

			}
    }
//	System.out.println(sb);
	writer.write(sb.toString());
	writer.close();}
	catch(Exception e) {
		System.out.println(e);
	}
	}
void listProd() {
	System.out.println("------------------------[ avail products]------------------------");
	Set ks=prods.keySet();
	Iterator i= ks.iterator();
	while (i.hasNext()) {
		System.out.print("        => ");
		System.out.println(i.next());
	}
System.out.println(".............................................................");
}

void listBrand(String product) {
	System.out.println("------------------------[ avail brands]------------------------");
	HashMap brands= (HashMap)prods.get(product);
	Set ks=brands.keySet();
	Iterator i= ks.iterator();
	while (i.hasNext()) {
	System.out.print("        => ");
		System.out.println(i.next());
	}
	System.out.println(".............................................................");
}
void avail(HashMap desc) {
	System.out.println("------------------------[ avail stock]------------------------");
	System.out.print("        => ");
	System.out.print(desc.get("stock"));
	System.out.println("  nos.");
	System.out.println(".............................................................");
}
void readfile() {
	try {
	      ArrayList fullData=new ArrayList();
	      Scanner myReader = new Scanner(file);
	      boolean head=true;
	      while (myReader.hasNextLine()) {
	        String data = myReader.nextLine();
	        if (!head) {
	        	String[] d=data.split(",");
	        fullData.add(d);}
	        head=false;
	      }
	      myReader.close();
//	      System.out.println(fullData);
	      load(fullData);
	    } catch (FileNotFoundException e) {
	      System.out.println("An error occurred.");
	      e.printStackTrace();
	    }
}
private void load(ArrayList data) {
	Iterator i= data.iterator();
	HashMap dummy=new HashMap();
	i= data.iterator();
	HashSet ts= new HashSet();
	while(i.hasNext()) {
		prodDesc= new HashMap();
		String[] rows=(String[]) i.next();
		prodDesc.put("stock", rows[2]);
		prodDesc.put("price", rows[3]);
		ts.add(rows[0]);
		dummy.put(String.join("-", rows[0],rows[1]), prodDesc);
	System.out.println(dummy);
	
	}
	Iterator di=dummy.entrySet().iterator();
	
	HashSet hs= new HashSet();
	Iterator tsi= ts.iterator();
	while(tsi.hasNext()) {
	String prod= (String)tsi.next();
	
		while (di.hasNext()) {
			Entry entry= (Entry)di.next();
			String key=(String)entry.getKey();
			String []keys= key.split("-");
			Object desc= entry.getValue();
		if(!hs.contains(keys[0])) {
			prodBrand= new HashMap();}
			hs.add(prod);
				
				
				prodBrand.put(keys[1], desc);
				prods.put(keys[0], prodBrand);
				
				
				
				
			}
	}		
		
//		
//	prodDesc.put("stock", rows[2]);
//	prodDesc.put("price", rows[3]);
//		prodBrand.put(rows[1], prodDesc);
//		prods.put(rows[0], prodBrand);
		System.out.println(prods);
		

}

}
