package scheduler;

import java.io.IOException;
import java.util.Map;
import java.util.TreeMap;
import java.util.concurrent.TimeUnit;

import org.snmp4j.CommunityTarget;
import org.snmp4j.PDU;
import org.snmp4j.Snmp;
import org.snmp4j.TransportMapping;
import org.snmp4j.event.ResponseEvent;
import org.snmp4j.event.ResponseListener;
import org.snmp4j.mp.SnmpConstants;
import org.snmp4j.smi.GenericAddress;
import org.snmp4j.smi.Integer32;
import org.snmp4j.smi.OID;
import org.snmp4j.smi.OctetString;
import org.snmp4j.smi.VariableBinding;
import org.snmp4j.transport.DefaultUdpTransportMapping;

public class GetBulk {
	TreeMap<String,TreeMap<String,String>> result= new TreeMap<String,TreeMap<String,String>>();
	String [] ips= {"192.168.200.101","192.168.200.102","192.168.200.103","192.168.200.104","192.168.200.106"};
//	  OID [] oids= {new OID("1.3.6.1.2.1.2.2.1.1"),new OID("1.3.6.1.2.1.2.2.1.2"),new OID("1.3.6.1.2.1.2.2.1.4")};// if index, if descr, if mtu
	 final String [] oids= {"1.3.6.1.2.1.2.2.1.1","1.3.6.1.2.1.2.2.1.2","1.3.6.1.2.1.2.2.1.4"};
	  void inittialize() {
	for(String ip : ips)
	createSesson(ip);
}

void createSesson(String ip) {
	 TransportMapping transport;
	try {
		transport = new DefaultUdpTransportMapping();
	
	    transport.listen();
	    final Snmp snmp = new Snmp(transport);
//	    snmp.listen();
	    CommunityTarget target = new CommunityTarget();
     target.setCommunity(new OctetString("public"));
     target.setAddress(GenericAddress.parse(ip+"/161")); // supply your own udp address and port
     target.setRetries(2);
     target.setTimeout(1500);
     target.setVersion(SnmpConstants.version2c);
 
	  
 	PDU pdu = new PDU();
 	pdu.setType(PDU.GET);
 	pdu.setRequestID(new Integer32(1));
//   for(OID oid:oids)
	pdu.add(new VariableBinding(new OID("1.3.6.1.2.1.2.1.0")));
	

	    ResponseListener listen= new ResponseListener() {
//	    	 final String IP=ip;
	    	
	    	@Override
		public void onResponse(ResponseEvent e) {

	    		if (e.getResponse()!=null) {
			String[] currentOids=oids;
				int indexNumber=Integer.parseInt(e.getResponse().get(0).toString().split("=")[1]);
			System.out.println(ip);//vector returned
		for (String oid:currentOids) {
			String currentOid= oid;
			for (int i=0;i<indexNumber;i++) {
				PDU pdu1 = new PDU();
			 	pdu1.setType(PDU.GETNEXT);
			 	pdu1.setRequestID(new Integer32(1));
				pdu1.add(new VariableBinding(new OID(currentOid)));
				
				  try {
					  ResponseEvent response=snmp.getNext(pdu1, target);
					
				
							if (response != null)
						    {
						      System.out.println("Got Response from Agent");
						      PDU responsePDU = response.getResponse();

						      if (responsePDU != null)
						      {
						        int errorStatus = responsePDU.getErrorStatus();
						        int errorIndex = responsePDU.getErrorIndex();
						        String errorStatusText = responsePDU.getErrorStatusText();

						        if (errorStatus == PDU.noError)
						        {
				
						        	System.out.println("Snmp Get Response = " + responsePDU.getVariableBindings());
						        	VariableBinding [] a=responsePDU.toArray();
						        currentOid = a[0].getOid().toString();
						        TreeMap<String, String> resValue=new TreeMap();
						        resValue.put(a[0].getOid().toString(),a[0].getVariable().toString());
						      result.put(ip+"/161",resValue  );
						        System.out.println(result);
						        }
						        
						      }
						    }
				} catch (IOException e1) {
					// TODO Auto-generated catch block
					e1.printStackTrace();
				}				
			}
			
		}
			}
		try {
			transport.close();
		} catch (IOException e1) {
			// TODO Auto-generated catch block
			e1.printStackTrace();
		}
	    	}
	    };
	  snmp.get(pdu, target,null,listen);
	
//	  TimeUnit.SECONDS.sleep(200);
	
	
	
	
	
	} catch (IOException e) {
		// TODO Auto-generated catch block
		e.printStackTrace();
	}
//	catch (InterruptedException e1) {
//		// TODO Auto-generated catch block
//		e1.printStackTrace();
//	}
	}

}
