package snmp;

import java.io.IOException;
import java.util.List;
import java.util.Map;
import java.util.TreeMap;
 
import org.snmp4j.CommunityTarget;
import org.snmp4j.Snmp;
import org.snmp4j.Target;
import org.snmp4j.TransportMapping;
import org.snmp4j.mp.SnmpConstants;
import org.snmp4j.smi.Address;
import org.snmp4j.smi.GenericAddress;
import org.snmp4j.smi.OID;
import org.snmp4j.smi.OctetString;
import org.snmp4j.smi.VariableBinding;
import org.snmp4j.transport.DefaultUdpTransportMapping;
import org.snmp4j.util.DefaultPDUFactory;
import org.snmp4j.util.TreeEvent;
import org.snmp4j.util.TreeUtils;
 
public class SnmpWalk {
 
    public static void main(String[] args) throws Exception {
        CommunityTarget target = new CommunityTarget();
        target.setCommunity(new OctetString("public"));
//        target.setAddress(GenericAddress.parse("192.168.199.102/161")); // supply your own IP and port
        target.setAddress(GenericAddress.parse("udp:192.168.200.101/161"));//udp mentioning the type of address
        target.setRetries(2);
        target.setTimeout(1500);
        target.setVersion(SnmpConstants.version2c);
         
        Map<String, String> result = doWalk(".1.3.6.1.2.1.", target); // ifTable, mib-2 interfaces//user defined methood
 
        for (Map.Entry<String, String> entry : result.entrySet()) {
        	if (entry.getKey().startsWith(".1.3.6.1.2.1.2.")){
        	System.out.println(entry.getKey());
        	System.out.println(entry.getValue());
        	}
//        	Map<String, String> result1 = doWalk(entry.getValue(), target);
//        	 for (Map.Entry<String, String> entry1 : result1.entrySet()) {
//             	System.out.println(entry1.getKey());
//             	System.out.println(entry1.getValue());
//             	}
        	
//            if (entry.getKey().startsWith(".1.3.6.1.2.1.1.9.1.2")) {
//                System.out.println("ifDescr" + entry.getKey().replace(".1.3.6.1.2.1.1.9.1.2", "") + ": " + entry.getValue());
//            }
//            if (entry.getKey().startsWith(".1.3.6.1.2.1.2.2.1.3.")) {
//                System.out.println("ifType" + entry.getKey().replace(".1.3.6.1.2.1.1.9.1.2", "") + ": " + entry.getValue());
//            }
        }
    }
 
    public static Map<String, String> doWalk(String tableOid, Target target) throws IOException {
        Map<String, String> result = new TreeMap<>();
        TransportMapping<? extends Address> transport = new DefaultUdpTransportMapping(); 
        // implements a UDP transport mapping based on Java standard IO and using an internal thread for listening on the inbound socket.
        Snmp snmp = new Snmp(transport);// create session for mib datas
        transport.listen();
//        ((DefaultUdpTransportMapping) transport).close();
        
        TreeUtils treeUtils = new TreeUtils(snmp, new DefaultPDUFactory());//default pdu create pdu  to set protocols to manage the datas from mib to this smps instance
        List <TreeEvent>events = treeUtils.getSubtree(target, new OID(tableOid));//create list of treeevents which can be utilized for iterations
        //The TreeEvent class reports events in a tree retrieval operation.
        if (events == null || events.size() == 0) {
            System.out.println("Error: Unable to read table...");
            return result;
        }
// System.out.println(events);
        for (TreeEvent event : events) {
//        	System.out.println(event);
            if (event == null) {
                continue;
            }
            if (event.isError()) {
                System.out.println("Error: table OID [" + tableOid + "] " + event.getErrorMessage());
                continue;
            }
 
            VariableBinding[] varBindings = event.getVariableBindings();//Gets the variable bindings retrieved in depth first order from the (sub-)tree.
            if (varBindings == null || varBindings.length == 0) {
                continue;
            }
            int n=0;
            for (VariableBinding varBinding : varBindings) {
//            	A VariableBinding is an association of a object instance identifier (OID) and the instance's value (Variable).
                
            	n++;
            	if (varBinding == null) {
                    continue;
                }
                 
                result.put("." + varBinding.getOid().toString(), varBinding.getVariable().toString());
            }
            System.out.println(n);
 
        }
        snmp.close();
 
        return result;
    }
 
}