package snmpByMe;

import java.util.List;

import org.snmp4j.CommunityTarget;
import org.snmp4j.PDU;
import org.snmp4j.Snmp;
import org.snmp4j.TransportMapping;
import org.snmp4j.event.ResponseEvent;
import org.snmp4j.event.ResponseListener;
import org.snmp4j.mp.SnmpConstants;
import org.snmp4j.smi.Address;
import org.snmp4j.smi.GenericAddress;
import org.snmp4j.smi.Integer32;
import org.snmp4j.smi.OID;
import org.snmp4j.smi.OctetString;
import org.snmp4j.smi.UdpAddress;
import org.snmp4j.smi.VariableBinding;
import org.snmp4j.transport.DefaultUdpTransportMapping;
import org.snmp4j.util.DefaultPDUFactory;
import org.snmp4j.util.PDUFactory;
import org.snmp4j.util.TableEvent;
import org.snmp4j.util.TableUtils;

public class SnmpGetBulk {

	 private static String  ipAddress  = "192.168.200.101";

	  private static String  port    = "161";

	  // OID of MIB RFC 1213; Scalar Object = .iso.org.dod.internet.mgmt.mib-2.system.sysDescr.0
	  private static String  oidValue  = ".1.3.6.1.2.1.2.2";  // ends with 0 for scalar object

	  private static int    snmpVersion  = SnmpConstants.version1;

	  private static String  community  = "public";

	  public static void main(String[] args) throws Exception
	  {
		  TransportMapping transport = new DefaultUdpTransportMapping();
		    transport.listen();
		    final Snmp snmp = new Snmp(transport);
		    snmp.listen();
		    CommunityTarget target = new CommunityTarget();
	        target.setCommunity(new OctetString("public"));
	        target.setAddress(GenericAddress.parse("192.168.200.101/161")); // supply your own udp address and port
	        target.setRetries(2);
	        target.setTimeout(1500);
	        target.setVersion(SnmpConstants.version2c);
	    
		  
	    	PDU pdu = new PDU();
//	      pdu.add(new VariableBinding(new OID(oidValue)));
	      pdu.setType(PDU.GETBULK);
	      pdu.setRequestID(new Integer32(1));
	  	pdu.add(new VariableBinding(new OID(oidValue)));
	  	pdu.add(new VariableBinding(new OID("1.3.6.1.2.1.1.1")));
	  	pdu.add(new VariableBinding(new OID("1.3.6.1.2.1.2")));
	  	    ResponseEvent response = snmp.getBulk(pdu, target);
//	  	    System.out.println(response.getSource());
//	  	    Event events=response.g
	  	    ResponseListener listen= new ResponseListener() {
				@Override
				public void onResponse(ResponseEvent e) {
					System.out.println(e);
					
				}
	  	    };
	  	  if (response != null)
		    {
		      System.out.println("Got Response from Agent");
		      PDU responsePDU = response.getResponse();

		      if (responsePDU != null)
		      {
		        int errorStatus = responsePDU.getErrorStatus();
		        int errorIndex = responsePDU.getErrorIndex();
		        String errorStatusText = responsePDU.getErrorStatusText();

		        if (errorStatus == PDU.noError)
		        {
		        	
		          System.out.println("Snmp Get Response = " + responsePDU.getVariableBindings());
		          }
		        else
		        {System.out.println("Error: Request Failed");
		          System.out.println("Error Status = " + errorStatus);
		          System.out.println("Error Index = " + errorIndex);
		          System.out.println("Error Status Text = " + errorStatusText);
		        }
		      }
		      else
		      {
		        System.out.println("Error: Response PDU is null");
		      }
		    }
		    else
		    {
		      System.out.println("Error: Agent Timeout... ");
		    }

	  	  
	  	  
	  	  snmp.close();
	}
		    
	  
	  
	  
	  
	  public static List<TableEvent> getResponse(final OID query, int port, final String community) throws Exception {
		    final Address targetAddress = GenericAddress.parse(String.format("127.0.0.1/%d", port));
		    final Snmp snmp = new Snmp(new DefaultUdpTransportMapping());
		    snmp.listen();
		    CommunityTarget target = new CommunityTarget();
	        target.setCommunity(new OctetString("public"));
	        target.setAddress(GenericAddress.parse("192.168.200.101/161")); // supply your own udp address and port
	        target.setRetries(2);
	        target.setTimeout(1500);
	        target.setVersion(SnmpConstants.version2c);
	        
		    

		    // creating PDU
		    final PDUFactory pduFactory = new DefaultPDUFactory(PDU.GETBULK);
		    final TableUtils utils = new TableUtils(snmp, pduFactory);

		System.out.println(utils.getTable(target, new OID[]{query}, null, null));
	
		
		
		List<TableEvent> events = utils.getTable(target, new OID[]{query}, null, null);

	       for (TableEvent event : events) {
	         if(event.isError()) {
	        	 
	        	 continue;
	              //throw new RuntimeException(event.getErrorMessage());
	         }
	         for(VariableBinding vb: event.getColumns()) {
	      	   String key = vb.getOid().toString();
	      	   String value = vb.getVariable().toString();
	      	   System.out.println(key+" ==> "+value);
	      	   }
	         }
		
		return utils.getTable(target, new OID[]{query}, null, null);

	  }
	
}
