package snmp;


import java.io.IOException;
import org.snmp4j.CommandResponder;
import org.snmp4j.CommandResponderEvent;
import org.snmp4j.CommunityTarget;
import org.snmp4j.MessageDispatcher;
import org.snmp4j.MessageDispatcherImpl;
import org.snmp4j.MessageException;
import org.snmp4j.PDU;
import org.snmp4j.Snmp;
import org.snmp4j.mp.MPv1;
import org.snmp4j.mp.MPv2c;
import org.snmp4j.mp.StateReference;
import org.snmp4j.mp.StatusInformation;
import org.snmp4j.security.Priv3DES;
import org.snmp4j.security.SecurityProtocols;
import org.snmp4j.smi.OctetString;
import org.snmp4j.smi.TcpAddress;
import org.snmp4j.smi.TransportIpAddress;
import org.snmp4j.smi.UdpAddress;
import org.snmp4j.transport.AbstractTransportMapping;
import org.snmp4j.transport.DefaultTcpTransportMapping;
import org.snmp4j.transport.DefaultUdpTransportMapping;
import org.snmp4j.util.MultiThreadedMessageDispatcher;
import org.snmp4j.util.ThreadPool;
public class TrapReceiver implements CommandResponder {
   public static void main(String[] args) {
       TrapReceiver snmp4jTrapReceiver = new TrapReceiver();
       try {
           snmp4jTrapReceiver.listen(new UdpAddress("localhost/162"));
       } catch (IOException e) {
           e.printStackTrace();
       }
       }
   /**
    * Trap Listner
    */
   public synchronized void listen(TransportIpAddress address)
           throws IOException {
       AbstractTransportMapping transport;
       if (address instanceof TcpAddress) {
           transport = new DefaultTcpTransportMapping((TcpAddress) address);
       } else {
           transport = new DefaultUdpTransportMapping((UdpAddress) address);
       }
       ThreadPool threadPool = ThreadPool.create("DispatcherPool", 10);// create a thread pool with specified name and number of threads specified in the method
       MessageDispatcher mDispathcher = new MultiThreadedMessageDispatcher(
               threadPool, new MessageDispatcherImpl());
//       The MultiThreadedMessageDispatcher class is a decorator for any MessageDispatcher instances that processes incoming message with a supplied ThreadPool. The processing is thus parallelized on up to the size of the supplied thread pool threads.
//       Adds a message processing model to this message dispatcher. If a message processing model with the same ID as the supplied one already exists it will not be changed.
       // add message processing models
       mDispathcher.addMessageProcessingModel(new MPv1());
//       In order to support a specific SNMP protocol version, the message dispatcher needs a message processing model to process messages before they can be dispatched.
       mDispathcher.addMessageProcessingModel(new MPv2c());
       // add all security protocols
       SecurityProtocols.getInstance().addDefaultProtocols();
       SecurityProtocols.getInstance().addPrivacyProtocol(new Priv3DES());
       // Create Target
       CommunityTarget target = new CommunityTarget();
       target.setCommunity(new OctetString("public"));
       Snmp snmp = new Snmp(mDispathcher, transport);
       snmp.addCommandResponder(this);
       transport.listen();
       System.out.println("Listening on " + address);
       try {
           this.wait();
       } catch (InterruptedException ex) {
           Thread.currentThread().interrupt();
       }
   }
   /**
    * This method will be called whenever a pdu is received on the given port
    * specified in the listen() method
    */
   public synchronized void processPdu(CommandResponderEvent cmdRespEvent) {
       System.out.println("Received PDU...");
       PDU pdu = cmdRespEvent.getPDU();
       if (pdu != null) {
           System.out.println("Trap Type = " + pdu.getType());
           System.out.println("Variables = " + pdu.getVariableBindings());
           }
       }
   }
