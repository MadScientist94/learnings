package snmpByMe;

import java.io.IOException;

import org.snmp4j.CommunityTarget;
import org.snmp4j.PDU;
import org.snmp4j.Snmp;
import org.snmp4j.TransportMapping;
import org.snmp4j.event.ResponseEvent;
import org.snmp4j.event.ResponseListener;
import org.snmp4j.mp.SnmpConstants;
import org.snmp4j.smi.OID;
import org.snmp4j.smi.OctetString;
import org.snmp4j.smi.UdpAddress;
import org.snmp4j.smi.VariableBinding;
import org.snmp4j.transport.DefaultUdpTransportMapping;

public class SnmpListiener {
	private static String  ipAddress  = "192.168.200.101";

	  private static String  port    = "161";

	  // OID of MIB RFC 1213; Scalar Object = .iso.org.dod.internet.mgmt.mib-2.system.sysDescr.0
	  private static String  oidValue  = "1.3.6.1.2.1.1.1.0";  // ends with 0 for scalar object

	public static void main(String[] args) throws IOException {
		 // setting up target
		   CommunityTarget target = new CommunityTarget();
		   target.setCommunity(new OctetString("public"));
		   target.setAddress(new UdpAddress(ipAddress + "/" + port));
		   target.setRetries(2);
		   target.setTimeout(1500);
		   target.setVersion(SnmpConstants.version2c);
		   // creating PDU
		   PDU pdu = new PDU();
		   pdu.add(new VariableBinding(new OID(new int[] {1,3,6,1,2,1,1,1})));
		   pdu.add(new VariableBinding(new OID(new int[] {1,3,6,1,2,1,1,2})));
		   pdu.setType(PDU.GETNEXT);
		   TransportMapping transport = new DefaultUdpTransportMapping();
		    transport.listen();
		    Snmp snmp = new Snmp(transport);
		   // sending request
		   ResponseListener listener = new ResponseListener() {
		     public void onResponse(ResponseEvent event) {
		       // Always cancel async request when response has been received
		       // otherwise a memory leak is created! Not canceling a request
		       // immediately can be useful when sending a request to a broadcast
		       // address.
		       ((Snmp)event.getSource()).cancel(event.getRequest(), this);
		       System.out.println("Received response PDU is: "+event.getResponse());
		     }
		   };
		 snmp.send(pdu, target,null,listener);

	}

}
