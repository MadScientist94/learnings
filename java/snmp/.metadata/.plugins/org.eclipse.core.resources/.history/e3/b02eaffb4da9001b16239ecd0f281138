package snmpByMe;


	import java.io.IOException;  
	import java.util.Vector;  
	import org.snmp4j.CommunityTarget;  
	import org.snmp4j.PDU;  
	import org.snmp4j.Snmp;  
	import org.snmp4j.TransportMapping;  
	import org.snmp4j.event.ResponseEvent;  
	import org.snmp4j.event.ResponseListener;  
	import org.snmp4j.mp.SnmpConstants;  
	import org.snmp4j.smi.Address;  
	import org.snmp4j.smi.GenericAddress;  
	import org.snmp4j.smi.OID;  
	import org.snmp4j.smi.OctetString;  
	import org.snmp4j.smi.VariableBinding;  
	import org.snmp4j.transport.DefaultUdpTransportMapping;  
	/** 
	 * @ 说明 SNMP4J test 
	 * @author cuisuqiang 
	 * @version 1.0 
	 * @since 
	 */  
	public class SnmpSet {  
	    private Snmp snmp = null;  
	    private Address targetAddress = null;  
	    public void initComm() throws IOException {  
	        //Set the IP and port of Agent  
	        targetAddress = GenericAddress.parse("udp:192.168.0.148/22500");  
	        TransportMapping transport = new DefaultUdpTransportMapping();  
	        snmp = new Snmp(transport);  
	        transport.listen();  
	    }  
	    public ResponseEvent sendPDU(PDU pdu) throws IOException {  
	        //Set goal  
	        CommunityTarget target = new CommunityTarget();  
	        target.setCommunity(new OctetString("public"));  
	        target.setAddress(targetAddress);  
	        //The number of retries when the communication is unsuccessful N + 1 times  
	        target.setRetries(2);  
	        //overtime time  
	        target.setTimeout(2 * 1000);  
	        //SNMP version  
	        target.setVersion(SnmpConstants.version2c);  
	        //Set the listening object  
	        ResponseListener listener = new ResponseListener() {  
	            public void onResponse(ResponseEvent event) {  
	                System.out.println("----------> Start asynchronous parsing <------------");  
	                readResponse(event);  
	            }  
	        };  
	        //send message  
	        snmp.send(pdu, target, null, listener);  
	        return null;  
	    }  
	    public void setPDU() throws IOException {  
	        //PDU object  
	        PDU pdu = new PDU();  
	        pdu.add(new VariableBinding(new OID("1.2.3.4.5.6"),new OctetString("priv")));
	        //Operation type  
	        pdu.setType(PDU.SET);  
	        ResponseEvent revent = sendPDU(pdu);  
	        if(null != revent){  
	            readResponse(revent);  
	        }  
	    }  
	    @SuppressWarnings("unchecked")  
	    public void readResponse(ResponseEvent respEvnt) {  
	        //Parse Response  
	        System.out.println("------------> Analyze Response <-------------");  
	        if (respEvnt != null && respEvnt.getResponse() != null) {  
	            Vector<VariableBinding> recVBs = (Vector<VariableBinding>) respEvnt.getResponse().getVariableBindings();  
	            for (int i = 0; i < recVBs.size(); i++) {  
	                VariableBinding recVB = recVBs.elementAt(i);  
	                System.out.println(recVB.getOid() + " : "  
	                        + recVB.getVariable().toString());  
	            }  
	        }  
	    }  

	public static void main(String[] args) {
		// TODO Auto-generated method stub

	}

}
