package snmpByMe;

import java.io.IOException;
import java.util.Vector;
 
import org.snmp4j.CommunityTarget;
import org.snmp4j.PDU;
import org.snmp4j.Snmp;
import org.snmp4j.TransportMapping;
import org.snmp4j.event.ResponseEvent;
import org.snmp4j.event.ResponseListener;
import org.snmp4j.mp.SnmpConstants;
import org.snmp4j.smi.Address;
import org.snmp4j.smi.GenericAddress;
import org.snmp4j.smi.OID;
import org.snmp4j.smi.OctetString;
import org.snmp4j.smi.VariableBinding;
import org.snmp4j.transport.DefaultUdpTransportMapping;
 
/**
 * @  SNMP4J test
 * @author cuisuqiang
 * @version 1.0
 * @since
 */
public class SnmpUtil {
	private Snmp snmp = null;
	private Address targetAddress = null;
 
	public void initComm() throws IOException {
 // Set the IP and port of the Agent side
targetAddress = GenericAddress.parse("udp:192.168.200.101/161");
TransportMapping transport = new DefaultUdpTransportMapping();
snmp = new Snmp(transport);
transport.listen();
	}
 
	public ResponseEvent sendPDU(PDU pdu) throws IOException{

		//setthetarget
		CommunityTarget target = new CommunityTarget();
		target.setCommunity(new OctetString("public"));
target.setAddress(targetAddress);
//RetrycountswhencommunicationisunsuccessfulN+1times
target.setRetries(2);
//overtimetime
target.setTimeout(2 * 1000);
//SNMPversion
target.setVersion(SnmpConstants.version2c);
// snmp.get(pdu, target);
 // Set the listener
ResponseListener listener = new ResponseListener() {
	public void onResponse(ResponseEvent event) {
 System.out.println("----------> starts asynchronous parsing <------------");
readResponse(event);
	}
};
 // send a message
//snmp.getBulk(pdu, target,null,listener);
snmp.send(pdu, target, null, listener);
return null;
	}
 
	public void getPDU() throws IOException {
 // PDU object
PDU pdu = new PDU();
pdu.add(new VariableBinding(new OID("1.6.1.2.1.1.1")));
 // operation type
pdu.setType(PDU.GET);
ResponseEvent revent = sendPDU(pdu);
if(null != revent){
	readResponse(revent);
}
	}
 
	@SuppressWarnings("unchecked")
	public void readResponse(ResponseEvent respEvnt) {
 // parsing Response
 System.out.println("------------>Resolve Response<-------------");
if (respEvnt != null && respEvnt.getResponse() != null) {
	Vector<VariableBinding> recVBs = (Vector<VariableBinding>) respEvnt.getResponse().getVariableBindings();
	for (int i = 0; i < recVBs.size(); i++) {
VariableBinding recVB = recVBs.elementAt(i);
System.out.println(recVB.getOid() + " : "
+ recVB.getVariable().toString());
	}
}
	}
 
	public static void main(String[] args) {
try {
	SnmpUtil util = new SnmpUtil();
	util.initComm();
	util.getPDU();
} catch (IOException e) {
	e.printStackTrace();
 
}
	}
}