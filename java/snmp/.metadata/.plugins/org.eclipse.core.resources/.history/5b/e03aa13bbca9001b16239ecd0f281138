package snmpByMe;

import java.io.IOException;
import java.util.Vector;
import java.util.concurrent.TimeUnit;

import org.snmp4j.CommunityTarget;
import org.snmp4j.PDU;
import org.snmp4j.Snmp;
import org.snmp4j.TransportMapping;
import org.snmp4j.event.ResponseEvent;
import org.snmp4j.event.ResponseListener;
import org.snmp4j.mp.SnmpConstants;
import org.snmp4j.smi.Integer32;
import org.snmp4j.smi.OID;
import org.snmp4j.smi.OctetString;
import org.snmp4j.smi.TimeTicks;
import org.snmp4j.smi.UdpAddress;
import org.snmp4j.smi.VariableBinding;
import org.snmp4j.transport.DefaultUdpTransportMapping;

public class SnmpSet {
//	.1.3.6.1.2.1.2.2.1.4.3

	private static String  ipAddress  = "192.168.199.101";

	  private static String  port    = "161";

	  // OID of MIB RFC 1213; Scalar Object = .iso.org.dod.internet.mgmt.mib-2.system.sysDescr.0
	  private static String  oidValue  = ".1.3.6.1.2.1.2.2.1.4.2";  // ends with 0 for scalar object
//	  1.3.6.1.2.1.1.3.0 = 0:13:35.01,
	  private static int    snmpVersion  = SnmpConstants.version2c;

	  private static String  community  = "public";

	public static void main(String[] args) throws IOException, InterruptedException {
		// TODO Auto-generated method stub
		// Create TransportMapping and Listen
	    TransportMapping transport = new DefaultUdpTransportMapping();
	    transport.listen();
System.out.println(new TimeTicks(360000));
System.out.println(new Integer32(1421));
// Create Target Address object
	    CommunityTarget comtarget = new CommunityTarget();
	    comtarget.setCommunity(new OctetString(community));
	    comtarget.setVersion(snmpVersion);
	    comtarget.setAddress(new UdpAddress(ipAddress + "/" + port));
	    comtarget.setRetries(2);
	    comtarget.setTimeout(1000);

	    // Create the PDU object
	    PDU pdu = new PDU();
	    pdu.add(new VariableBinding(new OID(oidValue),new Integer32(1421)));
	    pdu.setType(PDU.SET);
	    pdu.setRequestID(new Integer32(1));

	    // Create Snmp object for sending data to Agent
	    Snmp snmp = new Snmp(transport);
	    ResponseListener listener = new ResponseListener() {
	    	public void onResponse(ResponseEvent event) {
	     System.out.println("----------> starts asynchronous parsing <------------");
	    System.out.println(event.getResponse());
	     
	    	}
	    };
	    
	    System.out.println("Sending Request to Agent...");
//	    snmp.send(pdu, comtarget,null,listener);
		ResponseEvent response=snmp.send(pdu, comtarget);
//		TimeUnit.SECONDS.sleep(9);
		Vector<? extends VariableBinding> v=response.getResponse().getVariableBindings();
		System.out.println(v);
	}

}
