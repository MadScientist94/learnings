package com.jsch.learning.try20210610;

import java.io.BufferedReader;
import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.HashMap;
import java.util.Map;
import java.util.zip.GZIPInputStream;
import java.util.zip.GZIPOutputStream;

/**
 * Hello world!
 *
 */
public class App 
{
    public static void main( String[] args )
    {
    	gzipCheck();
    	//    	Map m= new HashMap();
//    	m.get("can");
//    	
//    	System.out.println(m.get("can"));
//    	
//    	for(int i=0 ;i<10;i++) {
//			switch(i) {
//			case 1: System.out.println(1);break;
//			case 2:System.out.println(2);break;
//			default: System.out.println("no");
//			}
//		System.out.println(i);[B@a3a380
    	
//		}
    }

    public static void  gzipCheck() {
    	String str="apple";
		ByteArrayOutputStream obj = new ByteArrayOutputStream();
		GZIPOutputStream gzip;
		long loopStart=System.nanoTime();
		try {
			gzip = new GZIPOutputStream(obj);
			gzip.write(str.getBytes("UTF-8"));
			gzip.flush();
			gzip.close();
		
		long loopEnd=System.nanoTime();
		System.out.println( loopEnd-loopStart + "time");
		byte[] compressed =obj.toByteArray();
//		System.out.println(ba);
		for (byte b:compressed) {
			System.out.println(b);
		}
		System.out.println(obj.toByteArray().toString());//[B@a3a380
		final StringBuilder outStr = new StringBuilder();
		
		final GZIPInputStream gis = new GZIPInputStream(new ByteArrayInputStream(compressed));
		final BufferedReader bufferedReader = new BufferedReader(new InputStreamReader(gis, "UTF-8"));

		String line;
		while ((line = bufferedReader.readLine()) != null) {
			outStr.append(line);
		}
		System.out.println(outStr.toString());
		} catch (IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
    }
    

public static void loopVsSteps() {
	String a="a";
	long loopStart=System.nanoTime();
//System.out.println(System.nanoTime());
	for(int i=0; i<1000;i++) {
//	a="1";
		
	}
	long loopEnd=System.nanoTime();
	long stepStart=System.nanoTime();
	
   	a="1";
	a="1";
	a="1";
	a="1";
	a="1";
	a="1";
	a="1";
	a="1";
	a="1";
	a="1";
	a="1";
	a="1";
	a="1";
	a="1";
	a="1";
	a="1";
	a="1";
	a="1";
	a="1";
	a="1";
	a="1";
	a="1";
	a="1";
	a="1";
	a="1";
	a="1";
	a="1";
	a="1";
	a="1";
	a="1";
	a="1";
	a="1";
	a="1";
	a="1";
	a="1";
	a="1";
	a="1";
	a="1";
	a="1";
	a="1";
	a="1";
	a="1";
	a="1";
	a="1";
	a="1";
	a="1";
	a="1";
	a="1";
	a="1";
	a="1";
	a="1";
	a="1";
	a="1";
	a="1";
	a="1";
	a="1";
	a="1";
	a="1";
	a="1";
	a="1";
	a="1";
	a="1";
	a="1";
	a="1";
	a="1";
	a="1";
	a="1";
	a="1";
	a="1";
	a="1";
	a="1";
	a="1";
	a="1";
	a="1";
	a="1";
	a="1";
	a="1";
	a="1";
	a="1";
	a="1";
	a="1";
	a="1";
	a="1";
	a="1";
	a="1";
	a="1";
	a="1";
	a="1";
	a="1";
	a="1";
	a="1";
	a="1";
	a="1";
	a="1";
	a="1";
	a="1";
	a="1";
	a="1";
	a="1";
	a="1";
   	a="1";
	a="1";
	a="1";
	a="1";
	a="1";
	a="1";
	a="1";
	a="1";
	a="1";
	a="1";
	a="1";
	a="1";
	a="1";
	a="1";
	a="1";
	a="1";
	a="1";
	a="1";
	a="1";
	a="1";
	a="1";
	a="1";
	a="1";
	a="1";
	a="1";
	a="1";
	a="1";
	a="1";
	a="1";
	a="1";
	a="1";
	a="1";
	a="1";
	a="1";
	a="1";
	a="1";
	a="1";
	a="1";
	a="1";
	a="1";
	a="1";
	a="1";
	a="1";
	a="1";
	a="1";
	a="1";
	a="1";
	a="1";
	a="1";
	a="1";
	a="1";
	a="1";
	a="1";
	a="1";
	a="1";
	a="1";
	a="1";
	a="1";
	a="1";
	a="1";
	a="1";
	a="1";
	a="1";
	a="1";
	a="1";
	a="1";
	a="1";
	a="1";
	a="1";
	a="1";
	a="1";
	a="1";
	a="1";
	a="1";
	a="1";
	a="1";
	a="1";
	a="1";
	a="1";
	a="1";
	a="1";
	a="1";
	a="1";
	a="1";
	a="1";
	a="1";
	a="1";
	a="1";
	a="1";
	a="1";
	a="1";
	a="1";
	a="1";
	a="1";
	a="1";
	a="1";
	a="1";
	a="1";
	a="1";
	a="1";
   	a="1";
	a="1";
	a="1";
	a="1";
	a="1";
	a="1";
	a="1";
	a="1";
	a="1";
	a="1";
	a="1";
	a="1";
	a="1";
	a="1";
	a="1";
	a="1";
	a="1";
	a="1";
	a="1";
	a="1";
	a="1";
	a="1";
	a="1";
	a="1";
	a="1";
	a="1";
	a="1";
	a="1";
	a="1";
	a="1";
	a="1";
	a="1";
	a="1";
	a="1";
	a="1";
	a="1";
	a="1";
	a="1";
	a="1";
	a="1";
	a="1";
	a="1";
	a="1";
	a="1";
	a="1";
	a="1";
	a="1";
	a="1";
	a="1";
	a="1";
	a="1";
	a="1";
	a="1";
	a="1";
	a="1";
	a="1";
	a="1";
	a="1";
	a="1";
	a="1";
	a="1";
	a="1";
	a="1";
	a="1";
	a="1";
	a="1";
	a="1";
	a="1";
	a="1";
	a="1";
	a="1";
	a="1";
	a="1";
	a="1";
	a="1";
	a="1";
	a="1";
	a="1";
	a="1";
	a="1";
	a="1";
	a="1";
	a="1";
	a="1";
	a="1";
	a="1";
	a="1";
	a="1";
	a="1";
	a="1";
	a="1";
	a="1";
	a="1";
	a="1";
	a="1";
	a="1";
	a="1";
	a="1";
	a="1";
	a="1";
   	a="1";
	a="1";
	a="1";
	a="1";
	a="1";
	a="1";
	a="1";
	a="1";
	a="1";
	a="1";
	a="1";
	a="1";
	a="1";
	a="1";
	a="1";
	a="1";
	a="1";
	a="1";
	a="1";
	a="1";
	a="1";
	a="1";
	a="1";
	a="1";
	a="1";
	a="1";
	a="1";
	a="1";
	a="1";
	a="1";
	a="1";
	a="1";
	a="1";
	a="1";
	a="1";
	a="1";
	a="1";
	a="1";
	a="1";
	a="1";
	a="1";
	a="1";
	a="1";
	a="1";
	a="1";
	a="1";
	a="1";
	a="1";
	a="1";
	a="1";
	a="1";
	a="1";
	a="1";
	a="1";
	a="1";
	a="1";
	a="1";
	a="1";
	a="1";
	a="1";
	a="1";
	a="1";
	a="1";
	a="1";
	a="1";
	a="1";
	a="1";
	a="1";
	a="1";
	a="1";
	a="1";
	a="1";
	a="1";
	a="1";
	a="1";
	a="1";
	a="1";
	a="1";
	a="1";
	a="1";
	a="1";
	a="1";
	a="1";
	a="1";
	a="1";
	a="1";
	a="1";
	a="1";
	a="1";
	a="1";
	a="1";
	a="1";
	a="1";
	a="1";
	a="1";
	a="1";
	a="1";
	a="1";
	a="1";
	a="1";
   	a="1";
	a="1";
	a="1";
	a="1";
	a="1";
	a="1";
	a="1";
	a="1";
	a="1";
	a="1";
	a="1";
	a="1";
	a="1";
	a="1";
	a="1";
	a="1";
	a="1";
	a="1";
	a="1";
	a="1";
	a="1";
	a="1";
	a="1";
	a="1";
	a="1";
	a="1";
	a="1";
	a="1";
	a="1";
	a="1";
	a="1";
	a="1";
	a="1";
	a="1";
	a="1";
	a="1";
	a="1";
	a="1";
	a="1";
	a="1";
	a="1";
	a="1";
	a="1";
	a="1";
	a="1";
	a="1";
	a="1";
	a="1";
	a="1";
	a="1";
	a="1";
	a="1";
	a="1";
	a="1";
	a="1";
	a="1";
	a="1";
	a="1";
	a="1";
	a="1";
	a="1";
	a="1";
	a="1";
	a="1";
	a="1";
	a="1";
	a="1";
	a="1";
	a="1";
	a="1";
	a="1";
	a="1";
	a="1";
	a="1";
	a="1";
	a="1";
	a="1";
	a="1";
	a="1";
	a="1";
	a="1";
	a="1";
	a="1";
	a="1";
	a="1";
	a="1";
	a="1";
	a="1";
	a="1";
	a="1";
	a="1";
	a="1";
	a="1";
	a="1";
	a="1";
	a="1";
	a="1";
	a="1";
	a="1";
	a="1";
   	a="1";
	a="1";
	a="1";
	a="1";
	a="1";
	a="1";
	a="1";
	a="1";
	a="1";
	a="1";
	a="1";
	a="1";
	a="1";
	a="1";
	a="1";
	a="1";
	a="1";
	a="1";
	a="1";
	a="1";
	a="1";
	a="1";
	a="1";
	a="1";
	a="1";
	a="1";
	a="1";
	a="1";
	a="1";
	a="1";
	a="1";
	a="1";
	a="1";
	a="1";
	a="1";
	a="1";
	a="1";
	a="1";
	a="1";
	a="1";
	a="1";
	a="1";
	a="1";
	a="1";
	a="1";
	a="1";
	a="1";
	a="1";
	a="1";
	a="1";
	a="1";
	a="1";
	a="1";
	a="1";
	a="1";
	a="1";
	a="1";
	a="1";
	a="1";
	a="1";
	a="1";
	a="1";
	a="1";
	a="1";
	a="1";
	a="1";
	a="1";
	a="1";
	a="1";
	a="1";
	a="1";
	a="1";
	a="1";
	a="1";
	a="1";
	a="1";
	a="1";
	a="1";
	a="1";
	a="1";
	a="1";
	a="1";
	a="1";
	a="1";
	a="1";
	a="1";
	a="1";
	a="1";
	a="1";
	a="1";
	a="1";
	a="1";
	a="1";
	a="1";
	a="1";
	a="1";
	a="1";
	a="1";
	a="1";
	a="1";
   	a="1";
	a="1";
	a="1";
	a="1";
	a="1";
	a="1";
	a="1";
	a="1";
	a="1";
	a="1";
	a="1";
	a="1";
	a="1";
	a="1";
	a="1";
	a="1";
	a="1";
	a="1";
	a="1";
	a="1";
	a="1";
	a="1";
	a="1";
	a="1";
	a="1";
	a="1";
	a="1";
	a="1";
	a="1";
	a="1";
	a="1";
	a="1";
	a="1";
	a="1";
	a="1";
	a="1";
	a="1";
	a="1";
	a="1";
	a="1";
	a="1";
	a="1";
	a="1";
	a="1";
	a="1";
	a="1";
	a="1";
	a="1";
	a="1";
	a="1";
	a="1";
	a="1";
	a="1";
	a="1";
	a="1";
	a="1";
	a="1";
	a="1";
	a="1";
	a="1";
	a="1";
	a="1";
	a="1";
	a="1";
	a="1";
	a="1";
	a="1";
	a="1";
	a="1";
	a="1";
	a="1";
	a="1";
	a="1";
	a="1";
	a="1";
	a="1";
	a="1";
	a="1";
	a="1";
	a="1";
	a="1";
	a="1";
	a="1";
	a="1";
	a="1";
	a="1";
	a="1";
	a="1";
	a="1";
	a="1";
	a="1";
	a="1";
	a="1";
	a="1";
	a="1";
	a="1";
	a="1";
	a="1";
	a="1";
	a="1";
   	a="1";
	a="1";
	a="1";
	a="1";
	a="1";
	a="1";
	a="1";
	a="1";
	a="1";
	a="1";
	a="1";
	a="1";
	a="1";
	a="1";
	a="1";
	a="1";
	a="1";
	a="1";
	a="1";
	a="1";
	a="1";
	a="1";
	a="1";
	a="1";
	a="1";
	a="1";
	a="1";
	a="1";
	a="1";
	a="1";
	a="1";
	a="1";
	a="1";
	a="1";
	a="1";
	a="1";
	a="1";
	a="1";
	a="1";
	a="1";
	a="1";
	a="1";
	a="1";
	a="1";
	a="1";
	a="1";
	a="1";
	a="1";
	a="1";
	a="1";
	a="1";
	a="1";
	a="1";
	a="1";
	a="1";
	a="1";
	a="1";
	a="1";
	a="1";
	a="1";
	a="1";
	a="1";
	a="1";
	a="1";
	a="1";
	a="1";
	a="1";
	a="1";
	a="1";
	a="1";
	a="1";
	a="1";
	a="1";
	a="1";
	a="1";
	a="1";
	a="1";
	a="1";
	a="1";
	a="1";
	a="1";
	a="1";
	a="1";
	a="1";
	a="1";
	a="1";
	a="1";
	a="1";
	a="1";
	a="1";
	a="1";
	a="1";
	a="1";
	a="1";
	a="1";
	a="1";
	a="1";
	a="1";
	a="1";
	a="1";
   	a="1";
	a="1";
	a="1";
	a="1";
	a="1";
	a="1";
	a="1";
	a="1";
	a="1";
	a="1";
	a="1";
	a="1";
	a="1";
	a="1";
	a="1";
	a="1";
	a="1";
	a="1";
	a="1";
	a="1";
	a="1";
	a="1";
	a="1";
	a="1";
	a="1";
	a="1";
	a="1";
	a="1";
	a="1";
	a="1";
	a="1";
	a="1";
	a="1";
	a="1";
	a="1";
	a="1";
	a="1";
	a="1";
	a="1";
	a="1";
	a="1";
	a="1";
	a="1";
	a="1";
	a="1";
	a="1";
	a="1";
	a="1";
	a="1";
	a="1";
	a="1";
	a="1";
	a="1";
	a="1";
	a="1";
	a="1";
	a="1";
	a="1";
	a="1";
	a="1";
	a="1";
	a="1";
	a="1";
	a="1";
	a="1";
	a="1";
	a="1";
	a="1";
	a="1";
	a="1";
	a="1";
	a="1";
	a="1";
	a="1";
	a="1";
	a="1";
	a="1";
	a="1";
	a="1";
	a="1";
	a="1";
	a="1";
	a="1";
	a="1";
	a="1";
	a="1";
	a="1";
	a="1";
	a="1";
	a="1";
	a="1";
	a="1";
	a="1";
	a="1";
	a="1";
	a="1";
	a="1";
	a="1";
	a="1";
	a="1";
   	a="1";
	a="1";
	a="1";
	a="1";
	a="1";
	a="1";
	a="1";
	a="1";
	a="1";
	a="1";
	a="1";
	a="1";
	a="1";
	a="1";
	a="1";
	a="1";
	a="1";
	a="1";
	a="1";
	a="1";
	a="1";
	a="1";
	a="1";
	a="1";
	a="1";
	a="1";
	a="1";
	a="1";
	a="1";
	a="1";
	a="1";
	a="1";
	a="1";
	a="1";
	a="1";
	a="1";
	a="1";
	a="1";
	a="1";
	a="1";
	a="1";
	a="1";
	a="1";
	a="1";
	a="1";
	a="1";
	a="1";
	a="1";
	a="1";
	a="1";
	a="1";
	a="1";
	a="1";
	a="1";
	a="1";
	a="1";
	a="1";
	a="1";
	a="1";
	a="1";
	a="1";
	a="1";
	a="1";
	a="1";
	a="1";
	a="1";
	a="1";
	a="1";
	a="1";
	a="1";
	a="1";
	a="1";
	a="1";
	a="1";
	a="1";
	a="1";
	a="1";
	a="1";
	a="1";
	a="1";
	a="1";
	a="1";
	a="1";
	a="1";
	a="1";
	a="1";
	a="1";
	a="1";
	a="1";
	a="1";
	a="1";
	a="1";
	a="1";
	a="1";
	a="1";
	a="1";
	a="1";
	a="1";
	a="1";
	a="1";
	
	long stepEnd=System.nanoTime();
	System.out.println(a);
	System.out.println("Loop : " + (loopEnd-loopStart));
	System.out.println("Steps : "+(stepEnd-stepStart) );

}

}
